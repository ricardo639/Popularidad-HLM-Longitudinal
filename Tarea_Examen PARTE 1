{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EOZrK9dbgQG4"
      },
      "source": [
        "# TAREA:\n",
        "\n",
        "\n",
        "# Regresion Lineal\n",
        "## Basado en Christensen, L y W. Greene (1976), \"Economies of Scale in U.S. Electric Power Generation\", Journal of Political Economy, Vol. 84, No. 4, pp. 655-676\n",
        "\n",
        "A continuación, resuleva cada una las instrucciones que se le señalan"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "u351mKMngQG6",
        "outputId": "3d1a5b69-8d59-4d13-89f4-2460e9f8fd3b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyreadstat\n",
            "  Downloading pyreadstat-1.2.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.0 kB)\n",
            "Requirement already satisfied: pandas>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from pyreadstat) (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2.0->pyreadstat) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2.0->pyreadstat) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2.0->pyreadstat) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2.0->pyreadstat) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.2.0->pyreadstat) (1.17.0)\n",
            "Downloading pyreadstat-1.2.8-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.9/2.9 MB\u001b[0m \u001b[31m40.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pyreadstat\n",
            "Successfully installed pyreadstat-1.2.8\n"
          ]
        }
      ],
      "source": [
        "# Importamos Dependencias o Bibliotecas necesarias:\n",
        "!pip install pyreadstat\n",
        "import pyreadstat # librería para leer formato \".dta\"\n",
        "import pandas as pd # librería para manipulación de datos\n",
        "import numpy as np # Librería para operaciones matemáticas\n",
        "import matplotlib # Librería para graficar\n",
        "from matplotlib import pyplot as plt # Librería para graficar\n",
        "import statsmodels.api as sm # Librería para análisis estadístico\n",
        "from IPython.display import Image # Librería para importar imagénes\n",
        "from statsmodels.formula.api import ols # Librería para pruebas de hipotesis\n",
        "\n",
        "#\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rNPpiBJJgQG7"
      },
      "source": [
        "### La base de datos contiene información de 100 empresa de generación eléctrica, reportada en las siguientes variables:\n",
        "\n",
        "* **firmid:** ID de la empresa\n",
        "* **cost:** Total costs in MM USD\n",
        "* **output:** output billion KwH\n",
        "* **plabor:** price of labor\n",
        "* **pfuel:** price of fuel\n",
        "* **pkap:** price of capital\n",
        "* **labshr:** participación del trabajo en el costo\n",
        "* **kapshr:** participación del capital en el costo"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "21QGmINogQG8"
      },
      "source": [
        "## 1. Importe la base de DATOS:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "jfyT61uOgQG9"
      },
      "outputs": [],
      "source": [
        "\n",
        "import pyreadstat  # Asegura que la librería esté importada\n",
        "\n",
        "# Ruta al archivo\n",
        "\n",
        "dtafile = \"/content/cgreene76.dta\"\n",
        "#Leer el archivo .dta y obtener el dataframe y los metadatos\n",
        "dataframe, meta = pyreadstat.read_dta(dtafile)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "WSxPPLYzgQG9",
        "outputId": "d3cb64e7-b0da-4d87-a66d-d13f0054c2be",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    firmid       costs   output       plabor       pkap      pfuel  labshr  \\\n",
              "89   127.0  111.867996  23217.0  6873.729980  83.879997  33.394402  0.0849   \n",
              "90   142.0  125.335999  24001.0  8047.350098  74.372002  33.093201  0.0998   \n",
              "91   137.0  183.231995  27118.0  9914.360352  78.480003  41.757801  0.1280   \n",
              "92   130.0   87.101501  27708.0  6378.229980  63.599998  20.299999  0.1060   \n",
              "93   144.0  240.514008  29613.0  9312.929688  81.750000  41.887199  0.1561   \n",
              "94   143.0  191.563004  30958.0  9810.099609  69.541000  36.307598  0.1636   \n",
              "95   141.0  168.378006  34212.0  5683.830078  80.385002  40.528599  0.0651   \n",
              "96   138.0  169.235001  38343.0  9117.160156  65.991997  31.589701  0.0663   \n",
              "97   175.0  269.773010  46870.0  9761.379883  69.541000  33.199902  0.1594   \n",
              "98   172.0  240.485992  53918.0  6068.870117  78.379997  31.195400  0.0966   \n",
              "\n",
              "    kapshr  \n",
              "89  0.2007  \n",
              "90  0.2457  \n",
              "91  0.2265  \n",
              "92  0.2257  \n",
              "93  0.2017  \n",
              "94  0.1524  \n",
              "95  0.1361  \n",
              "96  0.2192  \n",
              "97  0.2194  \n",
              "98  0.1846  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-28805e11-9583-4305-880c-a48294ab0fb4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>firmid</th>\n",
              "      <th>costs</th>\n",
              "      <th>output</th>\n",
              "      <th>plabor</th>\n",
              "      <th>pkap</th>\n",
              "      <th>pfuel</th>\n",
              "      <th>labshr</th>\n",
              "      <th>kapshr</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>127.0</td>\n",
              "      <td>111.867996</td>\n",
              "      <td>23217.0</td>\n",
              "      <td>6873.729980</td>\n",
              "      <td>83.879997</td>\n",
              "      <td>33.394402</td>\n",
              "      <td>0.0849</td>\n",
              "      <td>0.2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>90</th>\n",
              "      <td>142.0</td>\n",
              "      <td>125.335999</td>\n",
              "      <td>24001.0</td>\n",
              "      <td>8047.350098</td>\n",
              "      <td>74.372002</td>\n",
              "      <td>33.093201</td>\n",
              "      <td>0.0998</td>\n",
              "      <td>0.2457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>137.0</td>\n",
              "      <td>183.231995</td>\n",
              "      <td>27118.0</td>\n",
              "      <td>9914.360352</td>\n",
              "      <td>78.480003</td>\n",
              "      <td>41.757801</td>\n",
              "      <td>0.1280</td>\n",
              "      <td>0.2265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92</th>\n",
              "      <td>130.0</td>\n",
              "      <td>87.101501</td>\n",
              "      <td>27708.0</td>\n",
              "      <td>6378.229980</td>\n",
              "      <td>63.599998</td>\n",
              "      <td>20.299999</td>\n",
              "      <td>0.1060</td>\n",
              "      <td>0.2257</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93</th>\n",
              "      <td>144.0</td>\n",
              "      <td>240.514008</td>\n",
              "      <td>29613.0</td>\n",
              "      <td>9312.929688</td>\n",
              "      <td>81.750000</td>\n",
              "      <td>41.887199</td>\n",
              "      <td>0.1561</td>\n",
              "      <td>0.2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>143.0</td>\n",
              "      <td>191.563004</td>\n",
              "      <td>30958.0</td>\n",
              "      <td>9810.099609</td>\n",
              "      <td>69.541000</td>\n",
              "      <td>36.307598</td>\n",
              "      <td>0.1636</td>\n",
              "      <td>0.1524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>141.0</td>\n",
              "      <td>168.378006</td>\n",
              "      <td>34212.0</td>\n",
              "      <td>5683.830078</td>\n",
              "      <td>80.385002</td>\n",
              "      <td>40.528599</td>\n",
              "      <td>0.0651</td>\n",
              "      <td>0.1361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>138.0</td>\n",
              "      <td>169.235001</td>\n",
              "      <td>38343.0</td>\n",
              "      <td>9117.160156</td>\n",
              "      <td>65.991997</td>\n",
              "      <td>31.589701</td>\n",
              "      <td>0.0663</td>\n",
              "      <td>0.2192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>175.0</td>\n",
              "      <td>269.773010</td>\n",
              "      <td>46870.0</td>\n",
              "      <td>9761.379883</td>\n",
              "      <td>69.541000</td>\n",
              "      <td>33.199902</td>\n",
              "      <td>0.1594</td>\n",
              "      <td>0.2194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>172.0</td>\n",
              "      <td>240.485992</td>\n",
              "      <td>53918.0</td>\n",
              "      <td>6068.870117</td>\n",
              "      <td>78.379997</td>\n",
              "      <td>31.195400</td>\n",
              "      <td>0.0966</td>\n",
              "      <td>0.1846</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28805e11-9583-4305-880c-a48294ab0fb4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-28805e11-9583-4305-880c-a48294ab0fb4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-28805e11-9583-4305-880c-a48294ab0fb4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c0ea3abc-1cee-4819-bd0d-e9723b612609\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c0ea3abc-1cee-4819-bd0d-e9723b612609')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c0ea3abc-1cee-4819-bd0d-e9723b612609 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"firmid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.05857334191857,\n        \"min\": 127.0,\n        \"max\": 175.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          175.0,\n          142.0,\n          143.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"costs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.64654581151871,\n        \"min\": 87.10150146484375,\n        \"max\": 269.77301025390625,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          269.77301025390625,\n          125.33599853515625,\n          191.56300354003906\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"output\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10062.80417952946,\n        \"min\": 23217.0,\n        \"max\": 53918.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          46870.0,\n          24001.0,\n          30958.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"plabor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1696.9451495512048,\n        \"min\": 5683.830078125,\n        \"max\": 9914.3603515625,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          9761.3798828125,\n          8047.35009765625,\n          9810.099609375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pkap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.042616077900611,\n        \"min\": 63.599998474121094,\n        \"max\": 83.87999725341797,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          65.99199676513672,\n          74.37200164794922,\n          69.54100036621094\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pfuel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.4332022083162785,\n        \"min\": 20.299999237060547,\n        \"max\": 41.88719940185547,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          33.19990158081055,\n          33.09320068359375,\n          36.30759811401367\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labshr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03734416034969469,\n        \"min\": 0.06509999930858612,\n        \"max\": 0.16359999775886536,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.15940000116825104,\n          0.0997999981045723,\n          0.16359999775886536\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kapshr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.034595024573449026,\n        \"min\": 0.13609999418258667,\n        \"max\": 0.24570000171661377,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.21940000355243683,\n          0.24570000171661377,\n          0.15240000188350677\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# Muestre los datos importados\n",
        "dataframe.tail(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nWYO7c6XgQG-"
      },
      "source": [
        "# Considere una función de costos del tipo translog, escrita como:\n",
        "\n",
        "$$ln(C) = \\alpha_0 +  \\alpha_Y ln(Y) + \\frac{1}{2} \\gamma_{YY} (ln(Y))^2 + \\sum_k \\alpha_k ln(P_{k}) + \\frac{1}{2} \\sum_{k} \\sum_{j} \\gamma_{kj} ln(P_k) ln(P_j) + \\sum_k \\gamma_{Yk} ln(Y) ln(P_k) + \\varepsilon_i$$\n",
        "\n",
        "Este ecuación es equivalente a la que Christensen y Greene denominan Modelo A. Donde:\n",
        "$\\gamma_{kj} = \\gamma_{jk}$, $C$ es el costo total, $Y$ es el producto, $P_k$'s y $P_j$'s son los precios de los factores. $k,j = $ precio de combustible, precio del capital y precio del trabajo.\n",
        "\n",
        "Noten que la doble suma $\\sum_{k} \\sum_{j} \\gamma_{kj} ln(P_k) ln(P_j)$ implica que el caso $(ln(P_k))^2$ y $(ln(P_j))^2$ son posibles."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "19xlOS-sgQG-"
      },
      "source": [
        "## 2. Realice las transformaciones necesarias en los datos para estimar la ecuación anterior:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "1BcBpu6_gQG-"
      },
      "outputs": [],
      "source": [
        "#Creamos la variable:\n",
        "dataframe['Ltotcost'] = np.log(dataframe['costs'])\n",
        "dataframe['Loutput'] = np.log(dataframe['output'])\n",
        "dataframe['Lplabor'] = np.log(dataframe['plabor'])\n",
        "dataframe['Lpfuel'] = np.log(dataframe['pfuel'])\n",
        "dataframe['Lpkap'] = np.log(dataframe['pkap'])\n",
        "dataframe['avgcost'] = dataframe[\"costs\"]/dataframe[\"output\"]\n",
        "dataframe['producto1'] = np.log(dataframe['Lpfuel'] * dataframe['Loutput'])\n",
        "dataframe['producto2'] = np.log(dataframe['Lplabor'] * dataframe['Loutput'])\n",
        "dataframe['producto3'] = np.log(dataframe['Lpkap'] * dataframe['Loutput'])\n",
        "dataframe['One'] = 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "lJDY040AgQG_",
        "outputId": "135f01a7-c68a-490b-802f-6533587105e1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   firmid   costs  output       plabor       pkap      pfuel  labshr  kapshr  \\\n",
              "0     1.0  0.2130     8.0  6869.470215  64.945000  18.000000  0.3291  0.4197   \n",
              "1    20.0  0.4887    14.0  5438.890137  86.110001  34.150002  0.2994  0.4571   \n",
              "2    17.0  0.6159    50.0  9204.240234  90.470001  32.070000  0.2963  0.0981   \n",
              "3    14.0  0.7606    65.0  8971.889648  41.243000  28.539000  0.2802  0.1282   \n",
              "4    28.0  0.6363    67.0  6696.500000  58.257999  25.400000  0.2447  0.3674   \n",
              "\n",
              "   Ltotcost   Loutput   Lplabor    Lpfuel     Lpkap   avgcost  producto1  \\\n",
              "0 -1.546463  2.079442  8.834842  2.890372  4.173541  0.026625   1.793484   \n",
              "1 -0.716006  2.639057  8.601330  3.530763  4.455626  0.034907   2.231936   \n",
              "2 -0.484671  3.912023  9.127420  3.467921  4.505018  0.012318   2.607610   \n",
              "3 -0.273648  4.174387  9.101852  3.351272  3.719481  0.011702   2.638307   \n",
              "4 -0.452085  4.204693  8.809340  3.234749  4.064881  0.009497   2.610153   \n",
              "\n",
              "   producto2  producto3  One  \n",
              "0   2.910803   2.160864    1  \n",
              "1   3.122339   2.464589    1  \n",
              "2   3.575338   2.869247    1  \n",
              "3   3.637445   2.742552    1  \n",
              "4   3.612014   2.838586    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd091995-f4ff-4b26-8bfa-ea22e5fa5818\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>firmid</th>\n",
              "      <th>costs</th>\n",
              "      <th>output</th>\n",
              "      <th>plabor</th>\n",
              "      <th>pkap</th>\n",
              "      <th>pfuel</th>\n",
              "      <th>labshr</th>\n",
              "      <th>kapshr</th>\n",
              "      <th>Ltotcost</th>\n",
              "      <th>Loutput</th>\n",
              "      <th>Lplabor</th>\n",
              "      <th>Lpfuel</th>\n",
              "      <th>Lpkap</th>\n",
              "      <th>avgcost</th>\n",
              "      <th>producto1</th>\n",
              "      <th>producto2</th>\n",
              "      <th>producto3</th>\n",
              "      <th>One</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.2130</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6869.470215</td>\n",
              "      <td>64.945000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.3291</td>\n",
              "      <td>0.4197</td>\n",
              "      <td>-1.546463</td>\n",
              "      <td>2.079442</td>\n",
              "      <td>8.834842</td>\n",
              "      <td>2.890372</td>\n",
              "      <td>4.173541</td>\n",
              "      <td>0.026625</td>\n",
              "      <td>1.793484</td>\n",
              "      <td>2.910803</td>\n",
              "      <td>2.160864</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20.0</td>\n",
              "      <td>0.4887</td>\n",
              "      <td>14.0</td>\n",
              "      <td>5438.890137</td>\n",
              "      <td>86.110001</td>\n",
              "      <td>34.150002</td>\n",
              "      <td>0.2994</td>\n",
              "      <td>0.4571</td>\n",
              "      <td>-0.716006</td>\n",
              "      <td>2.639057</td>\n",
              "      <td>8.601330</td>\n",
              "      <td>3.530763</td>\n",
              "      <td>4.455626</td>\n",
              "      <td>0.034907</td>\n",
              "      <td>2.231936</td>\n",
              "      <td>3.122339</td>\n",
              "      <td>2.464589</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17.0</td>\n",
              "      <td>0.6159</td>\n",
              "      <td>50.0</td>\n",
              "      <td>9204.240234</td>\n",
              "      <td>90.470001</td>\n",
              "      <td>32.070000</td>\n",
              "      <td>0.2963</td>\n",
              "      <td>0.0981</td>\n",
              "      <td>-0.484671</td>\n",
              "      <td>3.912023</td>\n",
              "      <td>9.127420</td>\n",
              "      <td>3.467921</td>\n",
              "      <td>4.505018</td>\n",
              "      <td>0.012318</td>\n",
              "      <td>2.607610</td>\n",
              "      <td>3.575338</td>\n",
              "      <td>2.869247</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14.0</td>\n",
              "      <td>0.7606</td>\n",
              "      <td>65.0</td>\n",
              "      <td>8971.889648</td>\n",
              "      <td>41.243000</td>\n",
              "      <td>28.539000</td>\n",
              "      <td>0.2802</td>\n",
              "      <td>0.1282</td>\n",
              "      <td>-0.273648</td>\n",
              "      <td>4.174387</td>\n",
              "      <td>9.101852</td>\n",
              "      <td>3.351272</td>\n",
              "      <td>3.719481</td>\n",
              "      <td>0.011702</td>\n",
              "      <td>2.638307</td>\n",
              "      <td>3.637445</td>\n",
              "      <td>2.742552</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28.0</td>\n",
              "      <td>0.6363</td>\n",
              "      <td>67.0</td>\n",
              "      <td>6696.500000</td>\n",
              "      <td>58.257999</td>\n",
              "      <td>25.400000</td>\n",
              "      <td>0.2447</td>\n",
              "      <td>0.3674</td>\n",
              "      <td>-0.452085</td>\n",
              "      <td>4.204693</td>\n",
              "      <td>8.809340</td>\n",
              "      <td>3.234749</td>\n",
              "      <td>4.064881</td>\n",
              "      <td>0.009497</td>\n",
              "      <td>2.610153</td>\n",
              "      <td>3.612014</td>\n",
              "      <td>2.838586</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd091995-f4ff-4b26-8bfa-ea22e5fa5818')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dd091995-f4ff-4b26-8bfa-ea22e5fa5818 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dd091995-f4ff-4b26-8bfa-ea22e5fa5818');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8155b133-bb8c-4bae-9db5-43081743d1c1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8155b133-bb8c-4bae-9db5-43081743d1c1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8155b133-bb8c-4bae-9db5-43081743d1c1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 99,\n  \"fields\": [\n    {\n      \"column\": \"firmid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.951660822065804,\n        \"min\": 1.0,\n        \"max\": 181.0,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          120.0,\n          62.0,\n          141.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"costs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.67700674038557,\n        \"min\": 0.21299999952316284,\n        \"max\": 269.77301025390625,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          52.76340103149414,\n          20.86709976196289,\n          168.3780059814453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"output\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10315.140097991272,\n        \"min\": 8.0,\n        \"max\": 53918.0,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          9275.0,\n          3981.0,\n          34212.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"plabor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1256.6235755478403,\n        \"min\": 5063.490234375,\n        \"max\": 10806.2001953125,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          10373.5,\n          8403.58984375,\n          5683.830078125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pkap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.72786536472832,\n        \"min\": 39.12699890136719,\n        \"max\": 92.06300354003906,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          70.29499816894531,\n          64.94499969482422,\n          69.41100311279297\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pfuel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.041643102018607,\n        \"min\": 9.0,\n        \"max\": 50.45159912109375,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          24.580400466918945,\n          35.204898834228516,\n          40.52859878540039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"labshr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05860876218745167,\n        \"min\": 0.05270000174641609,\n        \"max\": 0.32910001277923584,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          0.19130000472068787,\n          0.149399995803833,\n          0.16269999742507935\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"kapshr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06226566277451346,\n        \"min\": 0.09809999912977219,\n        \"max\": 0.4571000039577484,\n        \"num_unique_values\": 96,\n        \"samples\": [\n          0.13369999825954437,\n          0.21940000355243683,\n          0.2102999985218048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ltotcost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.461156419320788,\n        \"min\": -1.5464631155113842,\n        \"max\": 5.597580902646307,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          3.9658177880818597,\n          3.038173744588187,\n          5.12621148746765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loutput\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6965651746992199,\n        \"min\": 2.0794415416798357,\n        \"max\": 10.895219652910134,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          9.135077887475635,\n          8.289288323000317,\n          10.440331738700673\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lplabor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1602209879441173,\n        \"min\": 8.529811294139098,\n        \"max\": 9.287875340543016,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          9.247009756333194,\n          9.036414255889316,\n          8.645380593999725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lpfuel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2808817479443194,\n        \"min\": 2.1972245773362196,\n        \"max\": 3.921014443444821,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          3.2019493963940606,\n          3.5611852443475533,\n          3.7020078677603316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lpkap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1520320885754885,\n        \"min\": 3.6668127376860515,\n        \"max\": 4.522473163753461,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          4.252700646483721,\n          4.1735407531602595,\n          4.24004540123947\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgcost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004065994350231854,\n        \"min\": 0.002542674320641091,\n        \"max\": 0.03490714303084782,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          0.005769644727336702,\n          0.005262824656232759,\n          0.004921606628710549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"producto1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2928844134214776,\n        \"min\": 1.7934844978881215,\n        \"max\": 3.6545516971092296,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          3.4854295528494452,\n          3.367962525941408,\n          3.6545516971092296\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"producto2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2738781490640983,\n        \"min\": 2.9108026204445805,\n        \"max\": 4.59308430345289,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          4.434875572142832,\n          4.3157406118865405,\n          4.502701500607621\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"producto3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2783487956862216,\n        \"min\": 2.1608641450917063,\n        \"max\": 3.8611559285493127,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          3.693012675109649,\n          3.5755391929713785,\n          3.824282685319955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"One\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "# Muestre su data frame con las variables adicionales necesarias\n",
        "dataframe.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4D7-GCQ_gQG_"
      },
      "source": [
        "## 3. Realice la estimación de la regresión de la función translog:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "W-ZSfS6hgQG_",
        "outputId": "9d50621b-6125-4e43-fba1-ae7b29fd6cd2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    One    Loutput   Lplabor    Lpfuel     Lpkap   avgcost\n",
              "0     1   2.079442  8.834842  2.890372  4.173541  0.026625\n",
              "1     1   2.639057  8.601330  3.530763  4.455626  0.034907\n",
              "2     1   3.912023  9.127420  3.467921  4.505018  0.012318\n",
              "3     1   4.174387  9.101852  3.351272  3.719481  0.011702\n",
              "4     1   4.204693  8.809340  3.234749  4.064881  0.009497\n",
              "..  ...        ...       ...       ...       ...       ...\n",
              "94    1  10.340387  9.191168  3.592027  4.241917  0.006188\n",
              "95    1  10.440332  8.645381  3.702008  4.386828  0.004922\n",
              "96    1  10.554327  9.117914  3.452831  4.189533  0.004414\n",
              "97    1  10.755133  9.186189  3.502547  4.241917  0.005756\n",
              "98    1  10.895220  8.710928  3.440271  4.361569  0.004460\n",
              "\n",
              "[99 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3e8707d-a96f-40cc-8902-f25832a2a05a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>One</th>\n",
              "      <th>Loutput</th>\n",
              "      <th>Lplabor</th>\n",
              "      <th>Lpfuel</th>\n",
              "      <th>Lpkap</th>\n",
              "      <th>avgcost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2.079442</td>\n",
              "      <td>8.834842</td>\n",
              "      <td>2.890372</td>\n",
              "      <td>4.173541</td>\n",
              "      <td>0.026625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2.639057</td>\n",
              "      <td>8.601330</td>\n",
              "      <td>3.530763</td>\n",
              "      <td>4.455626</td>\n",
              "      <td>0.034907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3.912023</td>\n",
              "      <td>9.127420</td>\n",
              "      <td>3.467921</td>\n",
              "      <td>4.505018</td>\n",
              "      <td>0.012318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4.174387</td>\n",
              "      <td>9.101852</td>\n",
              "      <td>3.351272</td>\n",
              "      <td>3.719481</td>\n",
              "      <td>0.011702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>4.204693</td>\n",
              "      <td>8.809340</td>\n",
              "      <td>3.234749</td>\n",
              "      <td>4.064881</td>\n",
              "      <td>0.009497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>1</td>\n",
              "      <td>10.340387</td>\n",
              "      <td>9.191168</td>\n",
              "      <td>3.592027</td>\n",
              "      <td>4.241917</td>\n",
              "      <td>0.006188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1</td>\n",
              "      <td>10.440332</td>\n",
              "      <td>8.645381</td>\n",
              "      <td>3.702008</td>\n",
              "      <td>4.386828</td>\n",
              "      <td>0.004922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>1</td>\n",
              "      <td>10.554327</td>\n",
              "      <td>9.117914</td>\n",
              "      <td>3.452831</td>\n",
              "      <td>4.189533</td>\n",
              "      <td>0.004414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1</td>\n",
              "      <td>10.755133</td>\n",
              "      <td>9.186189</td>\n",
              "      <td>3.502547</td>\n",
              "      <td>4.241917</td>\n",
              "      <td>0.005756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1</td>\n",
              "      <td>10.895220</td>\n",
              "      <td>8.710928</td>\n",
              "      <td>3.440271</td>\n",
              "      <td>4.361569</td>\n",
              "      <td>0.004460</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3e8707d-a96f-40cc-8902-f25832a2a05a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b3e8707d-a96f-40cc-8902-f25832a2a05a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b3e8707d-a96f-40cc-8902-f25832a2a05a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a1b54900-31ca-47f8-80d5-6b7bff2de96e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1b54900-31ca-47f8-80d5-6b7bff2de96e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a1b54900-31ca-47f8-80d5-6b7bff2de96e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d6c38191-e102-44ff-91b8-71080d2e0c8a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d6c38191-e102-44ff-91b8-71080d2e0c8a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 99,\n  \"fields\": [\n    {\n      \"column\": \"One\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loutput\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6965651746992199,\n        \"min\": 2.0794415416798357,\n        \"max\": 10.895219652910134,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          9.135077887475635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lplabor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1602209879441173,\n        \"min\": 8.529811294139098,\n        \"max\": 9.287875340543016,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          9.247009756333194\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lpfuel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2808817479443194,\n        \"min\": 2.1972245773362196,\n        \"max\": 3.921014443444821,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          3.2019493963940606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lpkap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1520320885754885,\n        \"min\": 3.6668127376860515,\n        \"max\": 4.522473163753461,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          4.252700646483721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgcost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004065994350231854,\n        \"min\": 0.002542674320641091,\n        \"max\": 0.03490714303084782,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          0.005769644727336702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# Definición de vector y matriz: Y y X\n",
        "Y = dataframe[\"Ltotcost\"]\n",
        "X = dataframe[[\"One\",\"Loutput\", \"Lplabor\", \"Lpfuel\", \"Lpkap\", \"avgcost\"]]\n",
        "#\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "sqx3C822gQHA",
        "outputId": "0ee87f01-1b80-4d1e-fe1a-d57e120c7028",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:               Ltotcost   R-squared:                       0.995\n",
            "Model:                            OLS   Adj. R-squared:                  0.995\n",
            "Method:                 Least Squares   F-statistic:                     4015.\n",
            "Date:                Thu, 27 Mar 2025   Prob (F-statistic):          5.72e-107\n",
            "Time:                        05:46:41   Log-Likelihood:                 88.763\n",
            "No. Observations:                  99   AIC:                            -165.5\n",
            "Df Residuals:                      93   BIC:                            -150.0\n",
            "Df Model:                           5                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "One           -8.7619      0.670    -13.074      0.000     -10.093      -7.431\n",
            "Loutput        0.9394      0.009    103.843      0.000       0.921       0.957\n",
            "Lplabor        0.2525      0.069      3.680      0.000       0.116       0.389\n",
            "Lpfuel         0.4453      0.041     10.803      0.000       0.363       0.527\n",
            "Lpkap         -0.0259      0.071     -0.367      0.715      -0.166       0.114\n",
            "avgcost       66.2645      3.739     17.725      0.000      58.840      73.689\n",
            "==============================================================================\n",
            "Omnibus:                        8.593   Durbin-Watson:                   1.570\n",
            "Prob(Omnibus):                  0.014   Jarque-Bera (JB):               18.282\n",
            "Skew:                          -0.092   Prob(JB):                     0.000107\n",
            "Kurtosis:                       5.097   Cond. No.                     4.91e+03\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 4.91e+03. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ],
      "source": [
        "# Resporte de la estimación:\n",
        "est = sm.OLS(Y,X)\n",
        "est2 = est.fit()\n",
        "print(est2.summary())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sefSzzIngQHA"
      },
      "source": [
        "## 4. Pruebe cada una de las siguientes hipótesis\n",
        "\n",
        "En cada caso escriba sus conclusiones respecto a la prueba y qué significado tiene para la estimación, de acuerdo con el trabajo de Christensen y Greene (1976)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "2a7jrQwfgQHA"
      },
      "outputs": [],
      "source": [
        "# Establecemos la formula de la ecuación estimada:\n",
        "formula = 'Ltotcost ~  One + Loutput + Lplabor + Lpfuel + Lpkap + avgcost'\n",
        "results = ols(formula , dataframe).fit()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DiqNjVL8gQHA"
      },
      "source": [
        "### 4.1\n",
        "$$H_0: \\sum_k \\alpha_k = 1$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "uTS28se0gQHA"
      },
      "outputs": [],
      "source": [
        "# Establecemos la hipótesis\n",
        "hypotheses_1 = 'Lplabor + Lpfuel + Lpkap= 1'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "hw_9hqUIgQHA",
        "outputId": "00022c39-2efd-4552-8f4a-22fe1d2ae06f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                             Test for Constraints                             \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "c0             0.6720      0.102     -3.221      0.002       0.470       0.874\n",
            "==============================================================================\n"
          ]
        }
      ],
      "source": [
        "# Prueba de la hipótesis:\n",
        "t_test_1 = results.t_test(hypotheses_1)\n",
        "print(t_test_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ib7o7qYUgQHB"
      },
      "source": [
        "### 4.2\n",
        "$$H_0: \\sum_k \\gamma_{Yk} = 0$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "EhSA8bLtgQHB"
      },
      "outputs": [],
      "source": [
        "# Establecemos la hipótesis #logaritmo\n",
        "hypotheses_2 = ' Lplabor + Lpfuel + Lpkap = 0'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "U1gy-bANgQHB",
        "outputId": "1ee70021-1432-4123-c244-e57c11f0b75b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                             Test for Constraints                             \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "c0             0.6720      0.102      6.598      0.000       0.470       0.874\n",
            "==============================================================================\n"
          ]
        }
      ],
      "source": [
        "# Prueba de la hipótesis:\n",
        "t_test_2 = results.t_test(hypotheses_2)\n",
        "print(t_test_2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aO1-CJxngQHB"
      },
      "source": [
        "### 4.3\n",
        "$$H_0: \\sum_{k} \\gamma_{kj} = \\sum_{j} \\gamma_{kj} = \\sum_{k} \\sum_{j} \\gamma_{kj} = 0$$"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Establecemos la formula de la ecuación estimada:\n",
        "formula2 = 'Ltotcost ~  One + producto1 + producto2 + producto3'\n",
        "results2 = ols(formula2 , dataframe).fit()"
      ],
      "metadata": {
        "id": "B6p-1QjTJJK7"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(results2.model.exog_names)\n"
      ],
      "metadata": {
        "id": "8epquuYkTNdQ",
        "outputId": "52d4a2cc-eae1-482a-d898-252b9a82842a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Intercept', 'One', 'producto1', 'producto2', 'producto3']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Establecemos la hipótesis\n",
        "hypotheses_3 = 'producto1 + producto2 + producto3 = 1'"
      ],
      "metadata": {
        "id": "T5lGqBXkRyDL"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "MEyGyHT5gQHC",
        "outputId": "0189e7f7-ca17-4cac-c860-cb8fed78f7ea",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                             Test for Constraints                             \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "c0             4.8888      0.184     21.127      0.000       4.523       5.254\n",
            "==============================================================================\n"
          ]
        }
      ],
      "source": [
        "# Prueba de la hipótesis:\n",
        "t_test_3 = results2.t_test(hypotheses_3)\n",
        "print(t_test_3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SFd18-QUgQHC"
      },
      "source": [
        "## 5. Dadas sus conclusiones en las pruebas de hipótesis anteriores, ¿considere si debe ajustar la función de costos del tipo translog descrita anteriormente?, en su caso ajuste la siguiente expresión a la forma que debería estimar:\n",
        "\n",
        "$$ln(C) = \\alpha_0 +  \\alpha_Y ln(Y) + \\frac{1}{2} \\gamma_{YY} (ln(Y))^2 + \\sum_k \\alpha_k ln(P_{k}) + \\frac{1}{2} \\sum_k \\sum_j \\gamma_{kj} ln(P_k) ln(P_j) + \\sum_k \\gamma_{Yk} ln(Y) ln(P_k) + \\varepsilon_i$$\n",
        "\n",
        "## Estime la nueva propuesta"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "4lZCdkzCgQHC",
        "outputId": "da9b63b9-dff0-4c1e-8330-0acdcaa5a564",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    One    Loutput   Lplabor    Lpfuel     Lpkap   avgcost\n",
              "0     1   2.079442  8.834842  2.890372  4.173541  0.026625\n",
              "1     1   2.639057  8.601330  3.530763  4.455626  0.034907\n",
              "2     1   3.912023  9.127420  3.467921  4.505018  0.012318\n",
              "3     1   4.174387  9.101852  3.351272  3.719481  0.011702\n",
              "4     1   4.204693  8.809340  3.234749  4.064881  0.009497\n",
              "..  ...        ...       ...       ...       ...       ...\n",
              "94    1  10.340387  9.191168  3.592027  4.241917  0.006188\n",
              "95    1  10.440332  8.645381  3.702008  4.386828  0.004922\n",
              "96    1  10.554327  9.117914  3.452831  4.189533  0.004414\n",
              "97    1  10.755133  9.186189  3.502547  4.241917  0.005756\n",
              "98    1  10.895220  8.710928  3.440271  4.361569  0.004460\n",
              "\n",
              "[99 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1805db95-fd3e-45e7-8f79-569aabc27402\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>One</th>\n",
              "      <th>Loutput</th>\n",
              "      <th>Lplabor</th>\n",
              "      <th>Lpfuel</th>\n",
              "      <th>Lpkap</th>\n",
              "      <th>avgcost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2.079442</td>\n",
              "      <td>8.834842</td>\n",
              "      <td>2.890372</td>\n",
              "      <td>4.173541</td>\n",
              "      <td>0.026625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2.639057</td>\n",
              "      <td>8.601330</td>\n",
              "      <td>3.530763</td>\n",
              "      <td>4.455626</td>\n",
              "      <td>0.034907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3.912023</td>\n",
              "      <td>9.127420</td>\n",
              "      <td>3.467921</td>\n",
              "      <td>4.505018</td>\n",
              "      <td>0.012318</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>4.174387</td>\n",
              "      <td>9.101852</td>\n",
              "      <td>3.351272</td>\n",
              "      <td>3.719481</td>\n",
              "      <td>0.011702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>4.204693</td>\n",
              "      <td>8.809340</td>\n",
              "      <td>3.234749</td>\n",
              "      <td>4.064881</td>\n",
              "      <td>0.009497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>1</td>\n",
              "      <td>10.340387</td>\n",
              "      <td>9.191168</td>\n",
              "      <td>3.592027</td>\n",
              "      <td>4.241917</td>\n",
              "      <td>0.006188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1</td>\n",
              "      <td>10.440332</td>\n",
              "      <td>8.645381</td>\n",
              "      <td>3.702008</td>\n",
              "      <td>4.386828</td>\n",
              "      <td>0.004922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>1</td>\n",
              "      <td>10.554327</td>\n",
              "      <td>9.117914</td>\n",
              "      <td>3.452831</td>\n",
              "      <td>4.189533</td>\n",
              "      <td>0.004414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1</td>\n",
              "      <td>10.755133</td>\n",
              "      <td>9.186189</td>\n",
              "      <td>3.502547</td>\n",
              "      <td>4.241917</td>\n",
              "      <td>0.005756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1</td>\n",
              "      <td>10.895220</td>\n",
              "      <td>8.710928</td>\n",
              "      <td>3.440271</td>\n",
              "      <td>4.361569</td>\n",
              "      <td>0.004460</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1805db95-fd3e-45e7-8f79-569aabc27402')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1805db95-fd3e-45e7-8f79-569aabc27402 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1805db95-fd3e-45e7-8f79-569aabc27402');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d12b88ee-7378-4180-9576-d78db7cf9438\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d12b88ee-7378-4180-9576-d78db7cf9438')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d12b88ee-7378-4180-9576-d78db7cf9438 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bbb2f654-cd42-4d3d-ad9f-bd21da51a40a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bbb2f654-cd42-4d3d-ad9f-bd21da51a40a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 99,\n  \"fields\": [\n    {\n      \"column\": \"One\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loutput\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6965651746992199,\n        \"min\": 2.0794415416798357,\n        \"max\": 10.895219652910134,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          9.135077887475635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lplabor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1602209879441173,\n        \"min\": 8.529811294139098,\n        \"max\": 9.287875340543016,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          9.247009756333194\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lpfuel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2808817479443194,\n        \"min\": 2.1972245773362196,\n        \"max\": 3.921014443444821,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          3.2019493963940606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lpkap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1520320885754885,\n        \"min\": 3.6668127376860515,\n        \"max\": 4.522473163753461,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          4.252700646483721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avgcost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.004065994350231854,\n        \"min\": 0.002542674320641091,\n        \"max\": 0.03490714303084782,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          0.005769644727336702\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "# Definición de vector y matriz: Y y X\n",
        "Y = dataframe[\"Ltotcost\"]\n",
        "X = dataframe[[\"One\",\"Loutput\", \"Lplabor\", \"Lpfuel\", \"Lpkap\", \"avgcost\"]]\n",
        "#\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "W9uzcDbBgQHC",
        "outputId": "cf2ed9db-1007-44fc-b9dc-d2f0f3b2ca75",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                 OLS Regression Results                                \n",
            "=======================================================================================\n",
            "Dep. Variable:               Ltotcost   R-squared (uncentered):                   0.999\n",
            "Model:                            OLS   Adj. R-squared (uncentered):              0.999\n",
            "Method:                 Least Squares   F-statistic:                          1.157e+05\n",
            "Date:                Thu, 27 Mar 2025   Prob (F-statistic):                   2.26e-152\n",
            "Time:                        06:07:33   Log-Likelihood:                          88.763\n",
            "No. Observations:                  99   AIC:                                     -175.5\n",
            "Df Residuals:                      98   BIC:                                     -172.9\n",
            "Df Model:                           1                                                  \n",
            "Covariance Type:            nonrobust                                                  \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "x1             1.0000      0.003    340.143      0.000       0.994       1.006\n",
            "==============================================================================\n",
            "Omnibus:                        8.593   Durbin-Watson:                   1.570\n",
            "Prob(Omnibus):                  0.014   Jarque-Bera (JB):               18.282\n",
            "Skew:                          -0.092   Prob(JB):                     0.000107\n",
            "Kurtosis:                       5.097   Cond. No.                         1.00\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n",
            "[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ],
      "source": [
        "# Resporte de la estimación:\n",
        "est = sm.OLS(Y,X)\n",
        "est2 = est.fit()\n",
        "print(est2.summary())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xAcrKXhXgQHC"
      },
      "source": [
        "## 6. Determine el valor del Costo Total Estimado y el Costo Medio Estimado considerado cualquiera de las estimaciones que considere pertinente"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "27bm7gz7gQHC",
        "outputId": "bb5ecb86-dc82-428e-8396-eed9c3d06508",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   firmid   costs  output       plabor       pkap      pfuel  labshr  kapshr  \\\n",
              "0     1.0  0.2130     8.0  6869.470215  64.945000  18.000000  0.3291  0.4197   \n",
              "1    20.0  0.4887    14.0  5438.890137  86.110001  34.150002  0.2994  0.4571   \n",
              "2    17.0  0.6159    50.0  9204.240234  90.470001  32.070000  0.2963  0.0981   \n",
              "3    14.0  0.7606    65.0  8971.889648  41.243000  28.539000  0.2802  0.1282   \n",
              "4    28.0  0.6363    67.0  6696.500000  58.257999  25.400000  0.2447  0.3674   \n",
              "\n",
              "   Ltotcost   Loutput   Lplabor    Lpfuel     Lpkap   avgcost  producto1  \\\n",
              "0 -1.546463  2.079442  8.834842  2.890372  4.173541  0.026625   1.793484   \n",
              "1 -0.716006  2.639057  8.601330  3.530763  4.455626  0.034907   2.231936   \n",
              "2 -0.484671  3.912023  9.127420  3.467921  4.505018  0.012318   2.607610   \n",
              "3 -0.273648  4.174387  9.101852  3.351272  3.719481  0.011702   2.638307   \n",
              "4 -0.452085  4.204693  8.809340  3.234749  4.064881  0.009497   2.610153   \n",
              "\n",
              "   producto2  producto3  One    Lotcost_e  avgcost_e  \n",
              "0   2.910803   2.160864    1    31.393085   3.924136  \n",
              "1   3.122339   2.464589    1   164.823152  11.773082  \n",
              "2   3.575338   2.869247    1   583.026583  11.660532  \n",
              "3   3.637445   2.742552    1  4893.653916  75.286983  \n",
              "4   3.612014   2.838586    1   746.881926  11.147491  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99fa2e03-cd52-4f59-a0a3-76451508ad58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>firmid</th>\n",
              "      <th>costs</th>\n",
              "      <th>output</th>\n",
              "      <th>plabor</th>\n",
              "      <th>pkap</th>\n",
              "      <th>pfuel</th>\n",
              "      <th>labshr</th>\n",
              "      <th>kapshr</th>\n",
              "      <th>Ltotcost</th>\n",
              "      <th>Loutput</th>\n",
              "      <th>Lplabor</th>\n",
              "      <th>Lpfuel</th>\n",
              "      <th>Lpkap</th>\n",
              "      <th>avgcost</th>\n",
              "      <th>producto1</th>\n",
              "      <th>producto2</th>\n",
              "      <th>producto3</th>\n",
              "      <th>One</th>\n",
              "      <th>Lotcost_e</th>\n",
              "      <th>avgcost_e</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.2130</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6869.470215</td>\n",
              "      <td>64.945000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>0.3291</td>\n",
              "      <td>0.4197</td>\n",
              "      <td>-1.546463</td>\n",
              "      <td>2.079442</td>\n",
              "      <td>8.834842</td>\n",
              "      <td>2.890372</td>\n",
              "      <td>4.173541</td>\n",
              "      <td>0.026625</td>\n",
              "      <td>1.793484</td>\n",
              "      <td>2.910803</td>\n",
              "      <td>2.160864</td>\n",
              "      <td>1</td>\n",
              "      <td>31.393085</td>\n",
              "      <td>3.924136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20.0</td>\n",
              "      <td>0.4887</td>\n",
              "      <td>14.0</td>\n",
              "      <td>5438.890137</td>\n",
              "      <td>86.110001</td>\n",
              "      <td>34.150002</td>\n",
              "      <td>0.2994</td>\n",
              "      <td>0.4571</td>\n",
              "      <td>-0.716006</td>\n",
              "      <td>2.639057</td>\n",
              "      <td>8.601330</td>\n",
              "      <td>3.530763</td>\n",
              "      <td>4.455626</td>\n",
              "      <td>0.034907</td>\n",
              "      <td>2.231936</td>\n",
              "      <td>3.122339</td>\n",
              "      <td>2.464589</td>\n",
              "      <td>1</td>\n",
              "      <td>164.823152</td>\n",
              "      <td>11.773082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>17.0</td>\n",
              "      <td>0.6159</td>\n",
              "      <td>50.0</td>\n",
              "      <td>9204.240234</td>\n",
              "      <td>90.470001</td>\n",
              "      <td>32.070000</td>\n",
              "      <td>0.2963</td>\n",
              "      <td>0.0981</td>\n",
              "      <td>-0.484671</td>\n",
              "      <td>3.912023</td>\n",
              "      <td>9.127420</td>\n",
              "      <td>3.467921</td>\n",
              "      <td>4.505018</td>\n",
              "      <td>0.012318</td>\n",
              "      <td>2.607610</td>\n",
              "      <td>3.575338</td>\n",
              "      <td>2.869247</td>\n",
              "      <td>1</td>\n",
              "      <td>583.026583</td>\n",
              "      <td>11.660532</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>14.0</td>\n",
              "      <td>0.7606</td>\n",
              "      <td>65.0</td>\n",
              "      <td>8971.889648</td>\n",
              "      <td>41.243000</td>\n",
              "      <td>28.539000</td>\n",
              "      <td>0.2802</td>\n",
              "      <td>0.1282</td>\n",
              "      <td>-0.273648</td>\n",
              "      <td>4.174387</td>\n",
              "      <td>9.101852</td>\n",
              "      <td>3.351272</td>\n",
              "      <td>3.719481</td>\n",
              "      <td>0.011702</td>\n",
              "      <td>2.638307</td>\n",
              "      <td>3.637445</td>\n",
              "      <td>2.742552</td>\n",
              "      <td>1</td>\n",
              "      <td>4893.653916</td>\n",
              "      <td>75.286983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28.0</td>\n",
              "      <td>0.6363</td>\n",
              "      <td>67.0</td>\n",
              "      <td>6696.500000</td>\n",
              "      <td>58.257999</td>\n",
              "      <td>25.400000</td>\n",
              "      <td>0.2447</td>\n",
              "      <td>0.3674</td>\n",
              "      <td>-0.452085</td>\n",
              "      <td>4.204693</td>\n",
              "      <td>8.809340</td>\n",
              "      <td>3.234749</td>\n",
              "      <td>4.064881</td>\n",
              "      <td>0.009497</td>\n",
              "      <td>2.610153</td>\n",
              "      <td>3.612014</td>\n",
              "      <td>2.838586</td>\n",
              "      <td>1</td>\n",
              "      <td>746.881926</td>\n",
              "      <td>11.147491</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99fa2e03-cd52-4f59-a0a3-76451508ad58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-99fa2e03-cd52-4f59-a0a3-76451508ad58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-99fa2e03-cd52-4f59-a0a3-76451508ad58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af882075-993e-42c7-95a7-0a566ab1951a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af882075-993e-42c7-95a7-0a566ab1951a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af882075-993e-42c7-95a7-0a566ab1951a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "# Rcuperamos de la regresión el valor del Log del costo estimado\n",
        "X = est2.predict(X)\n",
        "# Anti-log:\n",
        "Y = np.exp(Y)\n",
        "# Colocamos en el Data Frame:\n",
        "dataframe['Lotcost_e'] = Y\n",
        "dataframe['avgcost_e'] = dataframe[\"Lotcost_e\"] /  dataframe[\"output\"]\n",
        "dataframe.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BKxgYKStgQHD"
      },
      "source": [
        "## 7. Gráfique su estimación de Costo Medio y el Costo Medio observado"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(dataframe['output'], dataframe['avgcost'], s=20, color='blue', label='Avg Cost real')\n",
        "plt.scatter(dataframe['output'], dataframe['avgcost_e'], s=20, color='red', label='Avg Cost estimado')\n",
        "\n",
        "# Título y leyenda\n",
        "plt.title(\"Gráfico de dispersión: Producto Vs Avg Cost y Avg Cost estimado\")\n",
        "plt.xlabel(\"Output\")\n",
        "plt.ylabel(\"Avg Cost\")\n",
        "plt.legend()\n",
        "\n",
        "# Mostrar gráfico\n",
        "plt.show()\n",
        "\n",
        "# Guardar la imagen en un archivo PNG\n",
        "plt.savefig(\"grafico_avgcost.png\")"
      ],
      "metadata": {
        "id": "4gOW2lhlO0BS",
        "outputId": "bf8fbfae-864a-4e3b-cf31-08c6f47f3ede",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        }
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "FY7rH5QegQHD",
        "outputId": "01233c53-6e0a-445e-857d-9878bb5925da",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 612
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'save' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-9ff2ede12648>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Guarde la imagen en un archivo PNG:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'save' is not defined"
          ]
        }
      ],
      "source": [
        "# graficamos resultados:\n",
        "plt.scatter(   \"output\", \"avgcost\", s=20, color='blue', label=\"Avg Cost real\" )\n",
        "plt.scatter( dataframe['output'], dataframe['avgcost_e'], s=20, color='red', label='Avg Cost estimado')\n",
        "plt.title(\"Gráfico de dispersión PRoducto Vs Avg Cost y Avg Cost estimado\")\n",
        "\n",
        "#\n",
        "plt.show()\n",
        "\n",
        "# Guarde la imagen en un archivo PNG:\n",
        "save()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rv3QBWKBgQHD"
      },
      "source": [
        "## 8. Guarde el Data Frame en un archivo CSV:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dLuAFMGagQHD"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.14"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}